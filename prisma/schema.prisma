generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agents {
  id                                  String    @id
  userId                              String    @unique
  nin                                 String    @unique
  firstName                           String
  middleName                          String?
  lastName                            String
  dateOfBirth                         DateTime?
  gender                              String?
  maritalStatus                       String?
  employmentStatus                    String?
  photoUrl                            String?
  phone                               String    @unique
  email                               String    @unique
  whatsAppNumber                      String?
  alternativePhone                    String?
  address                             String?
  city                                String?
  state                               String?
  localGovernment                     String?
  ward                                String?
  pollingUnit                         String?
  latitude                            Float?
  longitude                           Float?
  bankName                            String?
  accountName                         String?
  accountNumber                       String?
  bvn                                 String?   @unique
  assignedState                       String?
  assignedLGA                         String?
  assignedWards                       String[]
  employmentType                      String?
  salary                              Float?
  commissionRate                      Float?
  startDate                           DateTime?
  endDate                             DateTime?
  totalFarmersRegistered              Int       @default(0)
  activeAssignments                   Int       @default(0)
  performanceRating                   Float?
  registrationDate                    DateTime  @default(now())
  activationDate                      DateTime?
  status                              String    @default("pending")
  activationToken                     String?
  activationTokenExpiry               DateTime?
  passwordResetToken                  String?
  passwordResetExpiry                 DateTime?
  createdAt                           DateTime  @default(now())
  updatedAt                           DateTime
  createdByUserId                     String?
  users_agents_createdByUserIdTousers users?    @relation("agents_createdByUserIdTousers", fields: [createdByUserId], references: [id])
  users_agents_userIdTousers          users     @relation("agents_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)
}

model analytics {
  id        String   @id
  metric    String
  value     Json
  date      DateTime @default(now())
  createdAt DateTime @default(now())
}

model audit_logs {
  id        String   @id
  action    String
  tableName String
  recordId  String?
  oldValues Json?
  newValues Json?
  userId    String?
  timestamp DateTime @default(now())
}

model certificates {
  id            String    @id
  certificateId String    @unique
  farmerId      String
  issuedDate    DateTime  @default(now())
  expiryDate    DateTime?
  status        String    @default("active")
  qrCode        String?
  pdfPath       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  farmers       farmers   @relation(fields: [farmerId], references: [id], onDelete: Cascade)
}

model farmers {
  id               String         @id
  nin              String         @unique
  firstName        String
  middleName       String?
  lastName         String
  dateOfBirth      DateTime?
  gender           String?
  state            String?
  lga              String?
  maritalStatus    String?
  employmentStatus String?
  phone            String         @unique
  email            String?        @unique
  whatsAppNumber   String?
  address          String?
  ward             String?
  latitude         Float?
  longitude        Float?
  bankName         String?
  accountNumber    String?
  bvn              String?        @unique
  registrationDate DateTime       @default(now())
  status           String         @default("active")
  agentId          String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  photoUrl         String?
  accountName      String?
  certificates     certificates[]
  users            users?         @relation(fields: [agentId], references: [id])
  farms            farms[]
  referees         referees[]
}

model farms {
  id                  String   @id
  farmSize            Float?
  primaryCrop         String?
  produceCategory     String?
  farmOwnership       String?
  farmState           String?
  farmLocalGovernment String?
  farmingSeason       String?
  farmWard            String?
  farmPollingUnit     String?
  secondaryCrop       String?
  farmingExperience   Int?
  farmLatitude        Float?
  farmLongitude       Float?
  farmPolygon         Json?
  soilType            String?
  soilPH              Float?
  soilFertility       String?
  farmCoordinates     Json?
  coordinateSystem    String?  @default("WGS84")
  farmArea            Float?
  farmElevation       Float?
  year                Float?
  yieldSeason         String?
  crop                Float?
  quantity            Float?
  farmerId            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  farmers             farmers  @relation(fields: [farmerId], references: [id], onDelete: Cascade)
}

model local_governments {
  id        String   @id
  name      String
  code      String?
  stateId   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  states    states   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  wards     wards[]

  @@unique([name, stateId])
}

model polling_units {
  id        String   @id
  name      String
  code      String?
  wardId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  wards     wards    @relation(fields: [wardId], references: [id], onDelete: Cascade)

  @@unique([name, wardId])
}

model referees {
  id           String   @id
  firstName    String
  lastName     String
  phone        String
  relationship String
  farmerId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  farmers      farmers  @relation(fields: [farmerId], references: [id], onDelete: Cascade)
}

model states {
  id                String              @id
  name              String              @unique
  code              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  local_governments local_governments[]
}

model users {
  id                                   String    @id
  email                                String    @unique
  displayName                          String?
  role                                 String    @default("agent")
  createdAt                            DateTime  @default(now())
  updatedAt                            DateTime
  firstName                            String?
  isActive                             Boolean   @default(true)
  lastLogin                            DateTime?
  lastName                             String?
  password                             String?
  phoneNumber                          String?
  isVerified                           Boolean   @default(false)
  agents_agents_createdByUserIdTousers agents[]  @relation("agents_createdByUserIdTousers")
  agents_agents_userIdTousers          agents?   @relation("agents_userIdTousers")
  farmers                              farmers[]
}

model wards {
  id                String            @id
  name              String
  code              String?
  localGovernmentId String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  polling_units     polling_units[]
  local_governments local_governments @relation(fields: [localGovernmentId], references: [id], onDelete: Cascade)

  @@unique([name, localGovernmentId])
}
