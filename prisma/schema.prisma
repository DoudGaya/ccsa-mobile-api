generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  displayName            String?
  role                   String       @default("agent")
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  firstName              String?
  isActive               Boolean      @default(true)
  lastLogin              DateTime?
  lastName               String?
  password               String?
  phoneNumber            String?
  isVerified             Boolean      @default(false)
  passwordChangeRequired Boolean      @default(false)
  passwordResetToken     String?
  passwordResetExpiry    DateTime?
  createdAgents          Agent[]      @relation("CreatedByUser")
  agent                  Agent?
  farmers                Farmer[]
  userRoles              user_roles[]

  @@map("users")
}

model Agent {
  id                     String       @id @default(cuid())
  userId                 String       @unique
  nin                    String       @unique
  firstName              String
  middleName             String?
  lastName               String
  dateOfBirth            DateTime?
  gender                 String?
  maritalStatus          String?
  employmentStatus       String?
  photoUrl               String?
  phone                  String       @unique
  email                  String       @unique
  whatsAppNumber         String?
  alternativePhone       String?
  address                String?
  city                   String?
  state                  String?
  localGovernment        String?
  ward                   String?
  pollingUnit            String?
  latitude               Float?
  longitude              Float?
  bankName               String?
  accountName            String?
  accountNumber          String?
  bvn                    String?      @unique
  assignedState          String?
  assignedLGA            String?
  assignedWards          String[]
  employmentType         String?
  salary                 Float?
  commissionRate         Float?
  startDate              DateTime?
  endDate                DateTime?
  totalFarmersRegistered Int          @default(0)
  activeAssignments      Int          @default(0)
  performanceRating      Float?
  registrationDate       DateTime     @default(now())
  activationDate         DateTime?
  status                 String       @default("pending")
  activationToken        String?
  activationTokenExpiry  DateTime?
  passwordResetToken     String?
  passwordResetExpiry    DateTime?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  createdByUserId        String?
  createdBy              User?        @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords      Attendance[]

  @@map("agents")
}

model Farmer {
  id               String        @id @default(cuid())
  nin              String        @unique
  firstName        String
  middleName       String?
  lastName         String
  dateOfBirth      DateTime?
  gender           String?
  state            String?
  lga              String?
  maritalStatus    String?
  employmentStatus String?
  phone            String        @unique
  email            String?       @unique
  whatsAppNumber   String?
  address          String?
  ward             String?
  pollingUnit      String?
  latitude         Float?
  longitude        Float?
  bankName         String?
  accountNumber    String?
  bvn              String?       @unique
  registrationDate DateTime      @default(now())
  status           String        @default("Enrolled")
  agentId          String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  photoUrl         String?
  accountName      String?
  clusterId        String?
  certificates     Certificate[]
  agent            User?         @relation(fields: [agentId], references: [id])
  cluster          Cluster?      @relation(fields: [clusterId], references: [id])
  farms            Farm[]
  referees         Referee[]

  @@map("farmers")
}

model Farm {
  id                  String   @id @default(cuid())
  farmSize            Float?
  primaryCrop         String?
  produceCategory     String?
  farmOwnership       String?
  farmState           String?
  farmLocalGovernment String?
  farmingSeason       String?
  farmWard            String?
  farmPollingUnit     String?
  secondaryCrop       String?
  farmingExperience   Int?
  farmLatitude        Float?
  farmLongitude       Float?
  farmPolygon         Json?
  soilType            String?
  soilPH              Float?
  soilFertility       String?
  farmCoordinates     Json?
  coordinateSystem    String?  @default("WGS84")
  farmArea            Float?
  farmElevation       Float?
  year                Float?
  yieldSeason         String?
  crop                Float?
  quantity            Float?
  farmerId            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  farmer              Farmer   @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  @@map("farms")
}

model Referee {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  phone        String
  relationship String
  farmerId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  farmer       Farmer   @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  @@map("referees")
}

model Certificate {
  id            String    @id @default(cuid())
  certificateId String    @unique
  farmerId      String
  issuedDate    DateTime  @default(now())
  expiryDate    DateTime?
  status        String    @default("active")
  qrCode        String?
  pdfPath       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  farmer        Farmer    @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Analytics {
  id        String   @id @default(cuid())
  metric    String
  value     Json
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("analytics")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  tableName String
  recordId  String?
  oldValues Json?
  newValues Json?
  userId    String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

model State {
  id               String            @id @default(cuid())
  name             String            @unique
  code             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  localGovernments LocalGovernment[]

  @@map("states")
}

model LocalGovernment {
  id        String   @id @default(cuid())
  name      String
  code      String?
  stateId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  wards     Ward[]

  @@unique([name, stateId])
  @@map("local_governments")
}

model Ward {
  id                String          @id @default(cuid())
  name              String
  code              String?
  localGovernmentId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  pollingUnits      PollingUnit[]
  localGovernment   LocalGovernment @relation(fields: [localGovernmentId], references: [id], onDelete: Cascade)

  @@unique([name, localGovernmentId])
  @@map("wards")
}

model PollingUnit {
  id        String   @id @default(cuid())
  name      String
  code      String?
  wardId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ward      Ward     @relation(fields: [wardId], references: [id], onDelete: Cascade)

  @@unique([name, wardId])
  @@map("polling_units")
}

model Cluster {
  id                            String    @id @default(cuid())
  title                         String    @unique
  description                   String?
  clusterLeadFirstName          String
  clusterLeadLastName           String
  clusterLeadEmail              String
  clusterLeadPhone              String
  clusterLeadNIN                String?
  clusterLeadState              String?
  clusterLeadLGA                String?
  clusterLeadWard               String?
  clusterLeadPollingUnit        String?
  clusterLeadPosition           String?
  clusterLeadAddress            String?
  clusterLeadDateOfBirth        DateTime?
  clusterLeadGender             String?
  clusterLeadMaritalStatus      String?
  clusterLeadEmploymentStatus   String?
  clusterLeadBVN                String?
  clusterLeadBankName           String?
  clusterLeadAccountNumber      String?
  clusterLeadAccountName        String?
  clusterLeadAlternativePhone   String?
  clusterLeadWhatsAppNumber     String?
  isActive                      Boolean   @default(true)
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @default(now()) @updatedAt
  farmers                       Farmer[]

  @@map("clusters")
}

model roles {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Json?
  isSystem    Boolean      @default(false)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  createdBy   String?
  userRoles   user_roles[]

  @@map("roles")
}

model user_roles {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?
  role       roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Attendance {
  id        String   @id @default(cuid())
  agentId   String
  type      String   // 'check_in' or 'check_out'
  timestamp DateTime
  location  Json     // {latitude, longitude, accuracy, timestamp}
  date      String   // Date string for grouping
  duration  Int?     // Duration in minutes (for check_out records)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("attendance")
}
